#!/usr/bin/env python
'''
UBlox binary protocol handling

Copyright Andrew Tridgell, October 2012
Released under GNU GPL version 3 or later
'''

from datetime import datetime
import os
import struct
import sys
import time

# protocol constants
PREAMBLE1 = 0xb5
PREAMBLE2 = 0x62

# message classes
CLASS_NAV = 0x01
CLASS_RXM = 0x02
CLASS_INF = 0x04
CLASS_ACK = 0x05
CLASS_CFG = 0x06
CLASS_MON = 0x0A
CLASS_AID = 0x0B
CLASS_TIM = 0x0D
CLASS_ESF = 0x10

# ACK messages
MSG_ACK_NACK = 0x00
MSG_ACK_ACK = 0x01

# NAV messages
MSG_NAV_AOPSTATUS = 0x60
MSG_NAV_CLOCK     = 0x22
MSG_NAV_DGPS      = 0x31
MSG_NAV_DOP       = 0x4
MSG_NAV_EKFSTATUS = 0x40
MSG_NAV_HPPOSLLH  = 0x14
MSG_NAV_ORB       = 0x34
MSG_NAV_POSECEF   = 0x1
MSG_NAV_POSLLH    = 0x2
MSG_NAV_POSUTM    = 0x8
MSG_NAV_PVT       = 0x7
MSG_NAV_SAT       = 0x35
MSG_NAV_SBAS      = 0x32
MSG_NAV_SIG       = 0x43
MSG_NAV_SOL       = 0x6
MSG_NAV_STATUS    = 0x3
MSG_NAV_SVINFO    = 0x30
MSG_NAV_SVIN      = 0x3B
MSG_NAV_VELECEF   = 0x11
MSG_NAV_VELNED    = 0x12
MSG_NAV_TIMEGAL   = 0x25
MSG_NAV_TIMEGPS   = 0x20
MSG_NAV_TIMEUTC   = 0x21

# RXM messages
MSG_RXM_RAW    = 0x10
MSG_RXM_SFRB   = 0x11
MSG_RXM_SVSI   = 0x20
MSG_RXM_EPH    = 0x31
MSG_RXM_ALM    = 0x30
MSG_RXM_PMREQ  = 0x41
MSG_RXM_SFRBX  = 0x13
MSG_RXM_RAWX   = 0x15

# AID messages
MSG_AID_ALM    = 0x30
MSG_AID_EPH    = 0x31
MSG_AID_ALPSRV = 0x32
MSG_AID_AOP    = 0x33
MSG_AID_DATA   = 0x10
MSG_AID_ALP    = 0x50
MSG_AID_DATA   = 0x10
MSG_AID_HUI    = 0x02
MSG_AID_INI    = 0x01
MSG_AID_REQ    = 0x00

# CFG messages
MSG_CFG_ANT = 0x13
MSG_CFG_CFG = 0x09
MSG_CFG_DAT = 0x06
MSG_CFG_DGNSS = 0x70        # MW
MSG_CFG_EKF = 0x12          # MW not F9
MSG_CFG_ESFGWT = 0x29       # MW not F9
MSG_CFG_FXN = 0x0E          # MW not F9
MSG_CFG_GEOFENCE = 0x69     # MW
MSG_CFG_GNSS = 0x3E
MSG_CFG_INF = 0x02
MSG_CFG_ITFM = 0x39
MSG_CFG_LOGFILTER = 0x47    # MW
MSG_CFG_MSG = 0x01
MSG_CFG_NAV5 = 0x24
MSG_CFG_NAVX5 = 0x23
MSG_CFG_NMEA = 0x17
MSG_CFG_NVS = 0x22          # MW not F9
MSG_CFG_ODO = 0x1E          # MW
MSG_CFG_PM = 0x32           # MW not F9
MSG_CFG_PM2 = 0x3B          # MW not F9
MSG_CFG_PRT = 0x00
MSG_CFG_PWR = 0x57          # MW
MSG_CFG_RATE = 0x08
MSG_CFG_RINV = 0x34
MSG_CFG_RST = 0x04
MSG_CFG_RXM = 0x11          # MW not F9
MSG_CFG_SBAS = 0x16         # MW not F9
MSG_CFG_SET_RATE = 0x01     # MW not F9
MSG_CFG_TMODE = 0x1D        # MW not F9
MSG_CFG_TMODE2 = 0x3D       # MW not F9
MSG_CFG_TMODE3 = 0x71       # MW
MSG_CFG_TP = 0x07           # MW not F9
MSG_CFG_TP5 = 0x31
MSG_CFG_USB = 0x1b
MSG_CFG_VALDEL = 0x8C       # MW
MSG_CFG_VALGET = 0x8B       # MW
MSG_CFG_VALSET = 0x8A       # MW


# ESF messages
MSG_ESF_MEAS   = 0x02
MSG_ESF_STATUS = 0x10

# INF messages
MSG_INF_DEBUG  = 0x04
MSG_INF_ERROR  = 0x00
MSG_INF_NOTICE = 0x02
MSG_INF_TEST   = 0x03
MSG_INF_WARNING= 0x01

# MON messages
MSG_MON_SCHD  = 0x01
MSG_MON_HW    = 0x09
MSG_MON_HW2   = 0x0B
MSG_MON_IO    = 0x02
MSG_MON_MSGPP = 0x06
MSG_MON_RXBUF = 0x07
MSG_MON_RXR   = 0x21
MSG_MON_TXBUF = 0x08
MSG_MON_VER   = 0x04

# TIM messages
MSG_TIM_TP   = 0x01
MSG_TIM_TM2  = 0x03
MSG_TIM_SVIN = 0x04
MSG_TIM_VRFY = 0x06

# port IDs
PORT_DDC    =0
PORT_SERIAL1=1
PORT_SERIAL2=2
PORT_USB    =3
PORT_SPI    =4

# dynamic models
DYNAMIC_MODEL_PORTABLE   = 0
DYNAMIC_MODEL_STATIONARY = 2
DYNAMIC_MODEL_PEDESTRIAN = 3
DYNAMIC_MODEL_AUTOMOTIVE = 4
DYNAMIC_MODEL_SEA        = 5
DYNAMIC_MODEL_AIRBORNE1G = 6
DYNAMIC_MODEL_AIRBORNE2G = 7
DYNAMIC_MODEL_AIRBORNE4G = 8

#reset items
RESET_HOT  = 0
RESET_WARM = 1
RESET_COLD = 0xFFFF

RESET_HW            = 0
RESET_SW            = 1
RESET_SW_GPS        = 2
RESET_HW_GRACEFUL   = 4
RESET_GPS_STOP      = 8
RESET_GPS_START     = 9

class UBloxError(Exception):
    '''Ublox error class'''
    def __init__(self, msg):
        Exception.__init__(self, msg)
        self.message = msg

class UBloxAttrDict(dict):
    '''allow dictionary members as attributes'''
    def __init__(self):
        dict.__init__(self)

    def __getattr__(self, name):
        try:
            return self.__getitem__(name)
        except KeyError:
            raise AttributeError(name)

    def __setattr__(self, name, value):
        if self.__dict__.has_key(name):
            # allow set on normal attributes
            dict.__setattr__(self, name, value)
        else:
            self.__setitem__(name, value)

def ArrayParse(field):
    '''parse an array descriptor'''
    arridx = field.find('[')
    if arridx == -1:
        return (field, -1)
    alen = int(field[arridx+1:-1])
    fieldname = field[:arridx]
    return (fieldname, alen)

class UbloxConfigKV:
    key_hash = {}
    name_hash = {}

    def __init__(self, name, key, value_format):
        self.name = name
        self.key = key
        self.value_format = value_format

        self.__class__.key_hash[key] = self
        self.__class__.name_hash[name] = self

    @classmethod
    def unpack(cls, buf):
        ret = []
        key_format = '<I'

        while len(buf) > 0:
            sk = struct.calcsize(key_format)
            if sk > len(buf):
                raise UBloxError("%s INVALID_SK=%u" % (cls.name, len(buf)))
            key = struct.unpack(key_format, buf[:sk])[0]
            buf = buf[sk:]

            kv_instance = cls.key_hash[key]
            sv = struct.calcsize(kv_instance.value_format)
            if sv >len(buf):
                raise UBloxError("%s INVALID_SV=%u" % (cls.name, len(buf)))
            value = struct.unpack(kv_instance.value_format, buf[:sv])[0]
            buf = buf[sv:]
            ret.append({kv_instance.name: value})

        return ret

    @classmethod
    def pack(cls, kv_array):
        ret = bytes()
        for kv in kv_array:
            n = list(kv.keys())[0]
            v = kv[n]
            i = cls.name_hash[n]
            ret += struct.pack('<I', i.key)
            ret += struct.pack(i.value_format, v)
        return ret

# 6.7.1 CFG_GEOFENCE: Geofencing Configuration

UbloxConfigKV('CFG_GEOFENCE_CONFLVL', 0x20240011, '<B')
UbloxConfigKV('CFG_GEOFENCE_USE_PIO', 0x10240012, '<?')
UbloxConfigKV('CFG_GEOFENCE_PINPOL', 0x20240013, '<B')
UbloxConfigKV('CFG_GEOFENCE_PIN', 0x20240014, '<B')
UbloxConfigKV('CFG_GEOFENCE_USE_FENCE1', 0x10240020, '<?')
UbloxConfigKV('CFG_GEOFENCE_FENCE1_LAT', 0x40240021, '<i')
UbloxConfigKV('CFG_GEOFENCE_FENCE1_LON', 0x40240022, '<i')
UbloxConfigKV('CFG_GEOFENCE_FENCE1_RAD', 0x40240023, '<I')
UbloxConfigKV('CFG_GEOFENCE_USE_FENCE2', 0x10240030, '<?')
UbloxConfigKV('CFG_GEOFENCE_FENCE2_LAT', 0x40240031, '<i')
UbloxConfigKV('CFG_GEOFENCE_FENCE2_LON', 0x40240032, '<i')
UbloxConfigKV('CFG_GEOFENCE_FENCE2_RAD', 0x40240033, '<I')
UbloxConfigKV('CFG_GEOFENCE_USE_FENCE3', 0x10240040, '<?')
UbloxConfigKV('CFG_GEOFENCE_FENCE3_LAT', 0x40240041, '<i')
UbloxConfigKV('CFG_GEOFENCE_FENCE3_LON', 0x40240042, '<i')
UbloxConfigKV('CFG_GEOFENCE_FENCE3_RAD', 0x40240043, '<I')
UbloxConfigKV('CFG_GEOFENCE_USE_FENCE4', 0x10240050, '<?')
UbloxConfigKV('CFG_GEOFENCE_FENCE4_LAT', 0x40240051, '<i')
UbloxConfigKV('CFG_GEOFENCE_FENCE4_LON', 0x40240052, '<i')
UbloxConfigKV('CFG_GEOFENCE_FENCE4_RAD', 0x40240053, '<I')

# 6.7.2 CFG_HW: Hardware Configuration

UbloxConfigKV('CFG_HW_ANT_CFG_VOLTCTRL', 0x10a3002e, '<?')
UbloxConfigKV('CFG_HW_ANT_CFG_SHORTDET', 0x10a3002f, '<?')
UbloxConfigKV('CFG_HW_ANT_CFG_SHORTDET_POL', 0x10a30030, '<?')
UbloxConfigKV('CFG_HW_ANT_CFG_OPENDET', 0x10a30031, '<?')
UbloxConfigKV('CFG_HW_ANT_CFG_OPENDET_POL', 0x10a30032, '<?')
UbloxConfigKV('CFG_HW_ANT_CFG_PWRDOWN', 0x10a30033, '<?')
UbloxConfigKV('CFG_HW_ANT_CFG_PWRDOWN_POL', 0x10a30034, '<?')
UbloxConfigKV('CFG_HW_ANT_CFG_RECOVER', 0x10a30035, '<?')
UbloxConfigKV('CFG_HW_ANT_SUP_SWITCH_PIN', 0x20a30036, '<B')
UbloxConfigKV('CFG_HW_ANT_SUP_SHORT_PIN', 0x20a30037, '<B')
UbloxConfigKV('CFG_HW_ANT_SUP_OPEN_PIN', 0x20a30038, '<B')

# 6.7.3 CFG_I2C: Configuration of the, '<h'),C Interface

UbloxConfigKV('CFG_I2C_ADDRESS', 0x20510001, '<B')
UbloxConfigKV('CFG_I2C_EXTENDEDTIMEOUT', 0x10510002, '<?')
UbloxConfigKV('CFG_I2C_ENABLED', 0x10510003, '<?')

# 6.7.4 CFG_I2CINPROT: Input Protocol Configuration of the, '<h'),C Interface

UbloxConfigKV('CFG_I2CINPROT_UBX', 0x10710001, '<?')
UbloxConfigKV('CFG_I2CINPROT_NMEA', 0x10710002, '<?')
UbloxConfigKV('CFG_I2CINPROT_RTCM3X', 0x10710004, '<?')

# 6.7.5 CFG_I2COUTPROT: Output Protocol Configuration of the, '<h'),C Interface

UbloxConfigKV('CFG_I2COUTPROT_UBX', 0x10720001, '<?')
UbloxConfigKV('CFG_I2COUTPROT_NMEA', 0x10720002, '<?')
UbloxConfigKV('CFG_I2COUTPROT_RTCM3X', 0x10720004, '<?')

# 6.7.6 CFG_INFMSG: Inf Message Configuration

UbloxConfigKV('CFG_INFMSG_UBX_I2C', 0x20920001, '<B')
UbloxConfigKV('CFG_INFMSG_UBX_UART1', 0x20920002, '<B')
UbloxConfigKV('CFG_INFMSG_UBX_UART2', 0x20920003, '<B')
UbloxConfigKV('CFG_INFMSG_UBX_USB', 0x20920004, '<B')
UbloxConfigKV('CFG_INFMSG_UBX_SPI', 0x20920005, '<B')
UbloxConfigKV('CFG_INFMSG_NMEA_I2C', 0x20920006, '<B')
UbloxConfigKV('CFG_INFMSG_NMEA_UART1', 0x20920007, '<B')
UbloxConfigKV('CFG_INFMSG_NMEA_UART2', 0x20920008, '<B')
UbloxConfigKV('CFG_INFMSG_NMEA_USB', 0x20920009, '<B')
UbloxConfigKV('CFG_INFMSG_NMEA_SPI', 0x2092000a, '<B')

# 6.7.7 CFG_ITFM: Jamming/Interference Monitor configuration

UbloxConfigKV('CFG_ITFM_BBTHRESHOLD', 0x20410001, '<B')
UbloxConfigKV('CFG_ITFM_CWTHRESHOLD', 0x20410002, '<B')
UbloxConfigKV('CFG_ITFM_ENABLE', 0x1041000d, '<?')
UbloxConfigKV('CFG_ITFM_ANTSETTING', 0x20410010, '<B')
UbloxConfigKV('CFG_ITFM_ENABLE_AUX', 0x10410013, '<?')

# 6.7.8 CFG_LOGFILTER: Data Logger Configuration

UbloxConfigKV('CFG_LOGFILTER_RECORD_ENA', 0x10de0002, '<?')
UbloxConfigKV('CFG_LOGFILTER_ONCE_PER_WAKE_UP_ENA', 0x10de0003, '<?')
UbloxConfigKV('CFG_LOGFILTER_APPLY_ALL_FILTERS', 0x10de0004, '<?')
UbloxConfigKV('CFG_LOGFILTER_MIN_INTERVAL', 0x30de0005, '<H')
UbloxConfigKV('CFG_LOGFILTER_TIME_THRS', 0x30de0006, '<H')
UbloxConfigKV('CFG_LOGFILTER_SPEED_THRS', 0x30de0007, '<H')
UbloxConfigKV('CFG_LOGFILTER_POSITION_THRS', 0x40de0008, '<I')

# 6.7.9 CFG_MOT: Motion Detector Configuration

UbloxConfigKV('CFG_MOT_GNSSSPEED_THRS', 0x20250038, '<B')
UbloxConfigKV('CFG_MOT_GNSSDIST_THRS', 0x3025003b, '<H')

# 6.7.10 CFG_MSGOUT: Message Output Configuration

UbloxConfigKV('CFG_MSGOUT_NMEA_ID_DTM_I2C', 0x209100a6, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_DTM_SPI', 0x209100aa, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_DTM_UART1', 0x209100a7, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_DTM_UART2', 0x209100a8, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_DTM_USB', 0x209100a9, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GBS_I2C', 0x209100dd, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GBS_SPI', 0x209100e1, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GBS_UART1', 0x209100de, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GBS_UART2', 0x209100df, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GBS_USB', 0x209100e0, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GGA_I2C', 0x209100ba, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GGA_SPI', 0x209100be, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GGA_UART1', 0x209100bb, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GGA_UART2', 0x209100bc, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GGA_USB', 0x209100bd, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GLL_I2C', 0x209100c9, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GLL_SPI', 0x209100cd, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GLL_UART1', 0x209100ca, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GLL_UART2', 0x209100cb, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GLL_USB', 0x209100cc, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GNS_I2C', 0x209100b5, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GNS_SPI', 0x209100b9, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GNS_UART1', 0x209100b6, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GNS_UART2', 0x209100b7, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GNS_USB', 0x209100b8, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GRS_I2C', 0x209100ce, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GRS_SPI', 0x209100d2, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GRS_UART1', 0x209100cf, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GRS_UART2', 0x209100d0, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GRS_USB', 0x209100d1, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSA_I2C', 0x209100bf, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSA_SPI', 0x209100c3, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSA_UART1', 0x209100c0, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSA_UART2', 0x209100c1, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSA_USB', 0x209100c2, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GST_I2C', 0x209100d3, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GST_SPI', 0x209100d7, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GST_UART1', 0x209100d4, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GST_UART2', 0x209100d5, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GST_USB', 0x209100d6, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSV_I2C', 0x209100c4, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSV_SPI', 0x209100c8, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSV_UART1', 0x209100c5, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSV_UART2', 0x209100c6, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_GSV_USB', 0x209100c7, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_RMC_I2C', 0x209100ab, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_RMC_SPI', 0x209100af, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_RMC_UART1', 0x209100ac, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_RMC_UART2', 0x209100ad, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_RMC_USB', 0x209100ae, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VLW_I2C', 0x209100e7, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VLW_SPI', 0x209100eb, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VLW_UART1', 0x209100e8, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VLW_UART2', 0x209100e9, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VLW_USB', 0x209100ea, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VTG_I2C', 0x209100b0, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VTG_SPI', 0x209100b4, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VTG_UART1', 0x209100b1, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VTG_UART2', 0x209100b2, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_VTG_USB', 0x209100b3, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_ZDA_I2C', 0x209100d8, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_ZDA_SPI', 0x209100dc, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_ZDA_UART1', 0x209100d9, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_ZDA_UART2', 0x209100da, '<B')
UbloxConfigKV('CFG_MSGOUT_NMEA_ID_ZDA_USB', 0x209100db, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYP_I2C', 0x209100ec, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYP_SPI', 0x209100f0, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYP_UART1', 0x209100ed, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYP_UART2', 0x209100ee, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYP_USB', 0x209100ef, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYS_I2C', 0x209100f1, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYS_SPI', 0x209100f5, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYS_UART1', 0x209100f2, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYS_UART2', 0x209100f3, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYS_USB', 0x209100f4, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYT_I2C', 0x209100f6, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYT_SPI', 0x209100fa, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYT_UART1', 0x209100f7, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYT_UART2', 0x209100f8, '<B')
UbloxConfigKV('CFG_MSGOUT_PUBX_ID_POLYT_USB', 0x209100f9, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1005_I2C', 0x209102bd, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1005_SPI', 0x209102c1, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1005_UART1', 0x209102be, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1005_UART2', 0x209102bf, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1005_USB', 0x209102c0, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1074_I2C', 0x2091035e, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1074_SPI', 0x20910362, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1074_UART1', 0x2091035f, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1074_UART2', 0x20910360, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1074_USB', 0x20910361, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1077_I2C', 0x209102cc, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1077_SPI', 0x209102d0, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1077_UART1', 0x209102cd, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1077_UART2', 0x209102ce, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1077_USB', 0x209102cf, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1084_I2C', 0x20910363, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1084_SPI', 0x20910367, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1084_UART1', 0x20910364, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1084_UART2', 0x20910365, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1084_USB', 0x20910366, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1087_I2C', 0x209102d1, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1087_SPI', 0x209102d5, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1087_UART1', 0x209102d2, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1087_UART2', 0x209102d3, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1087_USB', 0x209102d4, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1094_I2C', 0x20910368, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1094_SPI', 0x2091036c, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1094_UART1', 0x20910369, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1094_UART2', 0x2091036a, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1094_USB', 0x2091036b, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1097_I2C', 0x20910318, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1097_SPI', 0x2091031c, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1097_UART1', 0x20910319, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1097_UART2', 0x2091031a, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1097_USB', 0x2091031b, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1124_I2C', 0x2091036d, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1124_SPI', 0x20910371, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1124_UART1', 0x2091036e, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1124_UART2', 0x2091036f, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1124_USB', 0x20910370, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1127_I2C', 0x209102d6, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1127_SPI', 0x209102da, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1127_UART1', 0x209102d7, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1127_UART2', 0x209102d8, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1127_USB', 0x209102d9, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1230_I2C', 0x20910303, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1230_SPI', 0x20910307, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1230_UART1', 0x20910304, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1230_UART2', 0x20910305, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE1230_USB', 0x20910306, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_0_I2C', 0x209102fe, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_0_SPI', 0x20910302, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_0_UART1', 0x209102ff, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_0_UART2', 0x20910300, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_0_USB', 0x20910301, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_1_I2C', 0x20910381, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_1_SPI', 0x20910385, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_1_UART1', 0x20910382, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_1_UART2', 0x20910383, '<B')
UbloxConfigKV('CFG_MSGOUT_RTCM_3X_TYPE4072_1_USB', 0x20910384, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_LOG_INFO_I2C', 0x20910259, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_LOG_INFO_SPI', 0x2091025d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_LOG_INFO_UART1', 0x2091025a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_LOG_INFO_UART2', 0x2091025b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_LOG_INFO_USB', 0x2091025c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_COMMS_I2C', 0x2091034f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_COMMS_SPI', 0x20910353, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_COMMS_UART1', 0x20910350, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_COMMS_UART2', 0x20910351, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_COMMS_USB', 0x20910352, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW2_I2C', 0x209101b9, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW2_SPI', 0x209101bd, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW2_UART1', 0x209101ba, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW2_UART2', 0x209101bb, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW2_USB', 0x209101bc, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW3_I2C', 0x20910354, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW3_SPI', 0x20910358, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW3_UART1', 0x20910355, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW3_UART2', 0x20910356, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW3_USB', 0x20910357, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW_I2C', 0x209101b4, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW_SPI', 0x209101b8, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW_UART1', 0x209101b5, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW_UART2', 0x209101b6, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_HW_USB', 0x209101b7, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_IO_I2C', 0x209101a5, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_IO_SPI', 0x209101a9, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_IO_UART1', 0x209101a6, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_IO_UART2', 0x209101a7, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_IO_USB', 0x209101a8, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_MSGPP_I2C', 0x20910196, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_MSGPP_SPI', 0x2091019a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_MSGPP_UART1', 0x20910197, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_MSGPP_UART2', 0x20910198, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_MSGPP_USB', 0x20910199, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RF_I2C', 0x20910359, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RF_SPI', 0x2091035d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RF_UART1', 0x2091035a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RF_UART2', 0x2091035b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RF_USB', 0x2091035c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXBUF_I2C', 0x209101a0, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXBUF_SPI', 0x209101a4, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXBUF_UART1', 0x209101a1, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXBUF_UART2', 0x209101a2, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXBUF_USB', 0x209101a3, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXR_I2C', 0x20910187, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXR_SPI', 0x2091018b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXR_UART1', 0x20910188, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXR_UART2', 0x20910189, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_RXR_USB', 0x2091018a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_TXBUF_I2C', 0x2091019b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_TXBUF_SPI', 0x2091019f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_TXBUF_UART1', 0x2091019c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_TXBUF_UART2', 0x2091019d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_MON_TXBUF_USB', 0x2091019e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_CLOCK_I2C', 0x20910065, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_CLOCK_SPI', 0x20910069, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_CLOCK_UART1', 0x20910066, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_CLOCK_UART2', 0x20910067, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_CLOCK_USB', 0x20910068, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_DOP_I2C', 0x20910038, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_DOP_SPI', 0x2091003c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_DOP_UART1', 0x20910039, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_DOP_UART2', 0x2091003a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_DOP_USB', 0x2091003b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_EOE_I2C', 0x2091015f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_EOE_SPI', 0x20910163, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_EOE_UART1', 0x20910160, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_EOE_UART2', 0x20910161, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_EOE_USB', 0x20910162, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_GEOFENCE_I2C', 0x209100a1, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_GEOFENCE_SPI', 0x209100a5, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_GEOFENCE_UART1', 0x209100a2, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_GEOFENCE_UART2', 0x209100a3, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_GEOFENCE_USB', 0x209100a4, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSECEF_I2C', 0x2091002e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSECEF_SPI', 0x20910032, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSECEF_UART1', 0x2091002f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSECEF_UART2', 0x20910030, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSECEF_USB', 0x20910031, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSLLH_I2C', 0x20910033, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSLLH_SPI', 0x20910037, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSLLH_UART1', 0x20910034, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSLLH_UART2', 0x20910035, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_HPPOSLLH_USB', 0x20910036, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ODO_I2C', 0x2091007e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ODO_SPI', 0x20910082, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ODO_UART1', 0x2091007f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ODO_UART2', 0x20910080, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ODO_USB', 0x20910081, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ORB_I2C', 0x20910010, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ORB_SPI', 0x20910014, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ORB_UART1', 0x20910011, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ORB_UART2', 0x20910012, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_ORB_USB', 0x20910013, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSECEF_I2C', 0x20910024, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSECEF_SPI', 0x20910028, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSECEF_UART1', 0x20910025, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSECEF_UART2', 0x20910026, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSECEF_USB', 0x20910027, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSLLH_I2C', 0x20910029, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSLLH_SPI', 0x2091002d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSLLH_UART1', 0x2091002a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSLLH_UART2', 0x2091002b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_POSLLH_USB', 0x2091002c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_PVT_I2C', 0x20910006, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_PVT_SPI', 0x2091000a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_PVT_UART1', 0x20910007, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_PVT_UART2', 0x20910008, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_PVT_USB', 0x20910009, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_RELPOSNED_I2C', 0x2091008d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_RELPOSNED_SPI', 0x20910091, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_RELPOSNED_UART1', 0x2091008e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_RELPOSNED_UART2', 0x2091008f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_RELPOSNED_USB', 0x20910090, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SAT_I2C', 0x20910015, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SAT_SPI', 0x20910019, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SAT_UART1', 0x20910016, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SAT_UART2', 0x20910017, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SAT_USB', 0x20910018, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SIG_I2C', 0x20910345, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SIG_SPI', 0x20910349, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SIG_UART1', 0x20910346, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SIG_UART2', 0x20910347, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SIG_USB', 0x20910348, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_STATUS_I2C', 0x2091001a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_STATUS_SPI', 0x2091001e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_STATUS_UART1', 0x2091001b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_STATUS_UART2', 0x2091001c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_STATUS_USB', 0x2091001d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SVIN_I2C', 0x20910088, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SVIN_SPI', 0x2091008c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SVIN_UART1', 0x20910089, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SVIN_UART2', 0x2091008a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_SVIN_USB', 0x2091008b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEBDS_I2C', 0x20910051, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEBDS_SPI', 0x20910055, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEBDS_UART1', 0x20910052, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEBDS_UART2', 0x20910053, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEBDS_USB', 0x20910054, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGAL_I2C', 0x20910056, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGAL_SPI', 0x2091005a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGAL_UART1', 0x20910057, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGAL_UART2', 0x20910058, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGAL_USB', 0x20910059, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGLO_I2C', 0x2091004c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGLO_SPI', 0x20910050, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGLO_UART1', 0x2091004d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGLO_UART2', 0x2091004e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGLO_USB', 0x2091004f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGPS_I2C', 0x20910047, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGPS_SPI', 0x2091004b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGPS_UART1', 0x20910048, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGPS_UART2', 0x20910049, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEGPS_USB', 0x2091004a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMELS_I2C', 0x20910060, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMELS_SPI', 0x20910064, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMELS_UART1', 0x20910061, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMELS_UART2', 0x20910062, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMELS_USB', 0x20910063, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEUTC_I2C', 0x2091005b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEUTC_SPI', 0x2091005f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEUTC_UART1', 0x2091005c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEUTC_UART2', 0x2091005d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_TIMEUTC_USB', 0x2091005e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELECEF_I2C', 0x2091003d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELECEF_SPI', 0x20910041, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELECEF_UART1', 0x2091003e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELECEF_UART2', 0x2091003f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELECEF_USB', 0x20910040, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELNED_I2C', 0x20910042, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELNED_SPI', 0x20910046, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELNED_UART1', 0x20910043, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELNED_UART2', 0x20910044, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_NAV_VELNED_USB', 0x20910045, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_MEASX_I2C', 0x20910204, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_MEASX_SPI', 0x20910208, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_MEASX_UART1', 0x20910205, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_MEASX_UART2', 0x20910206, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_MEASX_USB', 0x20910207, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RAWX_I2C', 0x209102a4, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RAWX_SPI', 0x209102a8, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RAWX_UART1', 0x209102a5, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RAWX_UART2', 0x209102a6, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RAWX_USB', 0x209102a7, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RLM_I2C', 0x2091025e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RLM_SPI', 0x20910262, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RLM_UART1', 0x2091025f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RLM_UART2', 0x20910260, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RLM_USB', 0x20910261, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RTCM_I2C', 0x20910268, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RTCM_SPI', 0x2091026c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RTCM_UART1', 0x20910269, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RTCM_UART2', 0x2091026a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_RTCM_USB', 0x2091026b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_SFRBX_I2C', 0x20910231, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_SFRBX_SPI', 0x20910235, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_SFRBX_UART1', 0x20910232, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_SFRBX_UART2', 0x20910233, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_RXM_SFRBX_USB', 0x20910234, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TM2_I2C', 0x20910178, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TM2_SPI', 0x2091017c, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TM2_UART1', 0x20910179, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TM2_UART2', 0x2091017a, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TM2_USB', 0x2091017b, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TP_I2C', 0x2091017d, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TP_SPI', 0x20910181, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TP_UART1', 0x2091017e, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TP_UART2', 0x2091017f, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_TP_USB', 0x20910180, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_VRFY_I2C', 0x20910092, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_VRFY_SPI', 0x20910096, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_VRFY_UART1', 0x20910093, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_VRFY_UART2', 0x20910094, '<B')
UbloxConfigKV('CFG_MSGOUT_UBX_TIM_VRFY_USB', 0x20910095, '<B')

# 6.7.11 CFG_NAVHPG: High Precision Navigation Configuration

UbloxConfigKV('CFG_NAVHPG_DGNSSMODE', 0x20140011, '<B')

# 6.7.12 CFG_NAVSPG: Standard Precision Navigation Configuration

UbloxConfigKV('CFG_NAVSPG_FIXMODE', 0x20110011, '<B')
UbloxConfigKV('CFG_NAVSPG_INIFIX3D', 0x10110013, '<?')
UbloxConfigKV('CFG_NAVSPG_WKNROLLOVER', 0x30110017, '<H')
UbloxConfigKV('CFG_NAVSPG_USE_PPP', 0x10110019, '<?')
UbloxConfigKV('CFG_NAVSPG_UTCSTANDARD', 0x2011001c, '<B')
UbloxConfigKV('CFG_NAVSPG_DYNMODEL', 0x20110021, '<B')
UbloxConfigKV('CFG_NAVSPG_ACKAIDING', 0x10110025, '<?')
UbloxConfigKV('CFG_NAVSPG_USE_USRDAT', 0x10110061, '<?')
UbloxConfigKV('CFG_NAVSPG_USRDAT_MAJA', 0x50110062, '<d')
UbloxConfigKV('CFG_NAVSPG_USRDAT_FLAT', 0x50110063, '<d')
UbloxConfigKV('CFG_NAVSPG_USRDAT_DX', 0x40110064, '<f')
UbloxConfigKV('CFG_NAVSPG_USRDAT_DY', 0x40110065, '<f')
UbloxConfigKV('CFG_NAVSPG_USRDAT_DZ', 0x40110066, '<f')
UbloxConfigKV('CFG_NAVSPG_USRDAT_ROTX', 0x40110067, '<f')
UbloxConfigKV('CFG_NAVSPG_USRDAT_ROTY', 0x40110068, '<f')
UbloxConfigKV('CFG_NAVSPG_USRDAT_ROTZ', 0x40110069, '<f')
UbloxConfigKV('CFG_NAVSPG_USRDAT_SCALE', 0x4011006a, '<f')
UbloxConfigKV('CFG_NAVSPG_INFIL_MINSVS', 0x201100a1, '<B')
UbloxConfigKV('CFG_NAVSPG_INFIL_MAXSVS', 0x201100a2, '<B')
UbloxConfigKV('CFG_NAVSPG_INFIL_MINCNO', 0x201100a3, '<B')
UbloxConfigKV('CFG_NAVSPG_INFIL_MINELEV', 0x201100a4, '<b')
UbloxConfigKV('CFG_NAVSPG_INFIL_NCNOTHRS', 0x201100aa, '<B')
UbloxConfigKV('CFG_NAVSPG_INFIL_CNOTHRS', 0x201100ab, '<B')
UbloxConfigKV('CFG_NAVSPG_OUTFIL_PDOP', 0x301100b1, '<H')
UbloxConfigKV('CFG_NAVSPG_OUTFIL_TDOP', 0x301100b2, '<H')
UbloxConfigKV('CFG_NAVSPG_OUTFIL_PACC', 0x301100b3, '<H')
UbloxConfigKV('CFG_NAVSPG_OUTFIL_TACC', 0x301100b4, '<H')
UbloxConfigKV('CFG_NAVSPG_OUTFIL_FACC', 0x301100b5, '<H')
UbloxConfigKV('CFG_NAVSPG_CONSTR_ALT', 0x401100c1, '<i')
UbloxConfigKV('CFG_NAVSPG_CONSTR_ALTVAR', 0x401100c2, '<I')
UbloxConfigKV('CFG_NAVSPG_CONSTR_DGNSSTO', 0x201100c4, '<B')

# 6.7.13 CFG_NMEA: NMEA Protocol Configuration

UbloxConfigKV('CFG_NMEA_PROTVER', 0x20930001, '<B')
UbloxConfigKV('CFG_NMEA_MAXSVS', 0x20930002, '<B')
UbloxConfigKV('CFG_NMEA_COMPAT', 0x10930003, '<?')
UbloxConfigKV('CFG_NMEA_CONSIDER', 0x10930004, '<?')
UbloxConfigKV('CFG_NMEA_LIMIT82', 0x10930005, '<?')
UbloxConfigKV('CFG_NMEA_HIGHPREC', 0x10930006, '<?')
UbloxConfigKV('CFG_NMEA_SVNUMBERING', 0x20930007, '<B')
UbloxConfigKV('CFG_NMEA_FILT_GPS', 0x10930011, '<?')
UbloxConfigKV('CFG_NMEA_FILT_SBAS', 0x10930012, '<?')
UbloxConfigKV('CFG_NMEA_FILT_QZSS', 0x10930015, '<?')
UbloxConfigKV('CFG_NMEA_FILT_GLO', 0x10930016, '<?')
UbloxConfigKV('CFG_NMEA_FILT_BDS', 0x10930017, '<?')
UbloxConfigKV('CFG_NMEA_OUT_INVFIX', 0x10930021, '<?')
UbloxConfigKV('CFG_NMEA_OUT_MSKFIX', 0x10930022, '<?')
UbloxConfigKV('CFG_NMEA_OUT_INVTIME', 0x10930023, '<?')
UbloxConfigKV('CFG_NMEA_OUT_INVDATE', 0x10930024, '<?')
UbloxConfigKV('CFG_NMEA_OUT_ONLYGPS', 0x10930025, '<?')
UbloxConfigKV('CFG_NMEA_OUT_FROZENCOG', 0x10930026, '<?')
UbloxConfigKV('CFG_NMEA_MAINTALKERID', 0x20930031, '<B')
UbloxConfigKV('CFG_NMEA_GSVTALKERID', 0x20930032, '<B')
UbloxConfigKV('CFG_NMEA_BDSTALKERID', 0x30930033, '<H')

# 6.7.14 CFG_ODO: Odometer and Low_Speed Course Over Ground Filter Configuration

UbloxConfigKV('CFG_ODO_USE_ODO', 0x10220001, '<?')
UbloxConfigKV('CFG_ODO_USE_COG', 0x10220002, '<?')
UbloxConfigKV('CFG_ODO_OUTLPVEL', 0x10220003, '<?')
UbloxConfigKV('CFG_ODO_OUTLPCOG', 0x10220004, '<?')
UbloxConfigKV('CFG_ODO_PROFILE', 0x20220005, '<B')
UbloxConfigKV('CFG_ODO_COGMAXSPEED', 0x20220021, '<B')
UbloxConfigKV('CFG_ODO_COGMAXPOSACC', 0x20220022, '<B')
UbloxConfigKV('CFG_ODO_VELLPGAIN', 0x20220031, '<B')
UbloxConfigKV('CFG_ODO_COGLPGAIN', 0x20220032, '<B')

# 6.7.15 CFG_RATE: Navigation and Measurement Rate Configuration

UbloxConfigKV('CFG_RATE_MEAS', 0x30210001, '<H')
UbloxConfigKV('CFG_RATE_NAV', 0x30210002, '<H')
UbloxConfigKV('CFG_RATE_TIMEREF', 0x20210003, '<B')

# 6.7.16 CFG_RINV: Remote Inventory

UbloxConfigKV('CFG_RINV_DUMP', 0x10c70001, '<?')
UbloxConfigKV('CFG_RINV_BINARY', 0x10c70002, '<?')
UbloxConfigKV('CFG_RINV_DATA_SIZE', 0x20c70003, '<B')
UbloxConfigKV('CFG_RINV_CHUNK0', 0x50c70004, '<8s')
UbloxConfigKV('CFG_RINV_CHUNK1', 0x50c70005, '<8s')
UbloxConfigKV('CFG_RINV_CHUNK2', 0x50c70006, '<8s')
UbloxConfigKV('CFG_RINV_CHUNK3', 0x50c70007, '<8s')

# 6.7.17 CFG_SIGNAL: Satellite Systems (GNSS) Signal Configuration

UbloxConfigKV('CFG_SIGNAL_GPS_ENA', 0x1031001f, '<?')
UbloxConfigKV('CFG_SIGNAL_GPS_L1CA_ENA', 0x10310001, '<?')
UbloxConfigKV('CFG_SIGNAL_GPS_L2C_ENA', 0x10310003, '<?')
UbloxConfigKV('CFG_SIGNAL_GAL_ENA', 0x10310021, '<?')
UbloxConfigKV('CFG_SIGNAL_GAL_E1_ENA', 0x10310007, '<?')
UbloxConfigKV('CFG_SIGNAL_GAL_E5B_ENA', 0x1031000a, '<?')
UbloxConfigKV('CFG_SIGNAL_BDS_ENA', 0x10310022, '<?')
UbloxConfigKV('CFG_SIGNAL_BDS_B1_ENA', 0x1031000d, '<?')
UbloxConfigKV('CFG_SIGNAL_BDS_B2_ENA', 0x1031000e, '<?')
UbloxConfigKV('CFG_SIGNAL_QZSS_ENA', 0x10310024, '<?')
UbloxConfigKV('CFG_SIGNAL_QZSS_L1CA_ENA', 0x10310012, '<?')
UbloxConfigKV('CFG_SIGNAL_QZSS_L2C_ENA', 0x10310015, '<?')
UbloxConfigKV('CFG_SIGNAL_GLO_ENA', 0x10310025, '<?')
UbloxConfigKV('CFG_SIGNAL_GLO_L1_ENA', 0x10310018, '<?')
UbloxConfigKV('CFG_SIGNAL_GLO_L2_ENA', 0x1031001a, '<?')

# 6.7.18 CFG_SPI: Configuration of the SPI Interface

UbloxConfigKV('CFG_SPI_MAXFF', 0x20640001, '<B')
UbloxConfigKV('CFG_SPI_CPOLARITY', 0x10640002, '<?')
UbloxConfigKV('CFG_SPI_CPHASE', 0x10640003, '<?')
UbloxConfigKV('CFG_SPI_EXTENDEDTIMEOUT', 0x10640005, '<?')
UbloxConfigKV('CFG_SPI_ENABLED', 0x10640006, '<?')

# 6.7.19 CFG_SPIINPROT: Input Protocol Configuration of the SPI Interface

UbloxConfigKV('CFG_SPIINPROT_UBX', 0x10790001, '<?')
UbloxConfigKV('CFG_SPIINPROT_NMEA', 0x10790002, '<?')
UbloxConfigKV('CFG_SPIINPROT_RTCM3X', 0x10790004, '<?')

# 6.7.20 CFG_SPIOUTPROT: Output Protocol Configuration of the SPI Interface

UbloxConfigKV('CFG_SPIOUTPROT_UBX', 0x107a0001, '<?')
UbloxConfigKV('CFG_SPIOUTPROT_NMEA', 0x107a0002, '<?')
UbloxConfigKV('CFG_SPIOUTPROT_RTCM3X', 0x107a0004, '<?')

# 6.7.21 CFG_TMODE: Time Mode Configuration

UbloxConfigKV('CFG_TMODE_MODE', 0x20030001, '<B')
UbloxConfigKV('CFG_TMODE_POS_TYPE', 0x20030002, '<B')
UbloxConfigKV('CFG_TMODE_ECEF_X', 0x40030003, '<i')
UbloxConfigKV('CFG_TMODE_ECEF_Y', 0x40030004, '<i')
UbloxConfigKV('CFG_TMODE_ECEF_Z', 0x40030005, '<i')
UbloxConfigKV('CFG_TMODE_ECEF_X_HP', 0x20030006, '<b')
UbloxConfigKV('CFG_TMODE_ECEF_Y_HP', 0x20030007, '<b')
UbloxConfigKV('CFG_TMODE_ECEF_Z_HP', 0x20030008, '<b')
UbloxConfigKV('CFG_TMODE_LAT', 0x40030009, '<i')
UbloxConfigKV('CFG_TMODE_LON', 0x4003000a, '<i')
UbloxConfigKV('CFG_TMODE_HEIGHT', 0x4003000b, '<i')
UbloxConfigKV('CFG_TMODE_LAT_HP', 0x2003000c, '<b')
UbloxConfigKV('CFG_TMODE_LON_HP', 0x2003000d, '<b')
UbloxConfigKV('CFG_TMODE_HEIGHT_HP', 0x2003000e, '<b')
UbloxConfigKV('CFG_TMODE_FIXED_POS_ACC', 0x4003000f, '<I')
UbloxConfigKV('CFG_TMODE_SVIN_MIN_DUR', 0x40030010, '<I')
UbloxConfigKV('CFG_TMODE_SVIN_ACC_LIMIT', 0x40030011, '<I')

# 6.7.22 CFG_TP: Timepulse Configuration

UbloxConfigKV('CFG_TP_PULSE_DEF', 0x20050023, '<B')
UbloxConfigKV('CFG_TP_PULSE_LENGTH_DEF', 0x20050030, '<B')
UbloxConfigKV('CFG_TP_ANT_CABLEDELAY', 0x30050001, '<h')
UbloxConfigKV('CFG_TP_PERIOD_TP1', 0x40050002, '<I')
UbloxConfigKV('CFG_TP_PERIOD_LOCK_TP1', 0x40050003, '<I')
UbloxConfigKV('CFG_TP_FREQ_TP1', 0x40050024, '<I')
UbloxConfigKV('CFG_TP_FREQ_LOCK_TP1', 0x40050025, '<I')
UbloxConfigKV('CFG_TP_LEN_TP1', 0x40050004, '<I')
UbloxConfigKV('CFG_TP_LEN_LOCK_TP1', 0x40050005, '<I')
UbloxConfigKV('CFG_TP_DUTY_TP1', 0x5005002a, '<d')
UbloxConfigKV('CFG_TP_DUTY_LOCK_TP1', 0x5005002b, '<d')
UbloxConfigKV('CFG_TP_USER_DELAY_TP1', 0x40050006, '<i')
UbloxConfigKV('CFG_TP_TP1_ENA', 0x10050007, '<?')
UbloxConfigKV('CFG_TP_SYNC_GNSS_TP1', 0x10050008, '<?')
UbloxConfigKV('CFG_TP_USE_LOCKED_TP1', 0x10050009, '<?')
UbloxConfigKV('CFG_TP_ALIGN_TO_TOW_TP1', 0x1005000a, '<?')
UbloxConfigKV('CFG_TP_POL_TP1', 0x1005000b, '<?')
UbloxConfigKV('CFG_TP_TIMEGRID_TP1', 0x2005000c, '<B')

# 6.7.23 CFG_TXREADY: Tx_Ready Configuration

UbloxConfigKV('CFG_TXREADY_ENABLED', 0x10a20001, '<?')
UbloxConfigKV('CFG_TXREADY_POLARITY', 0x10a20002, '<?')
UbloxConfigKV('CFG_TXREADY_PIN', 0x20a20003, '<B')
UbloxConfigKV('CFG_TXREADY_THRESHOLD', 0x30a20004, '<H')
UbloxConfigKV('CFG_TXREADY_INTERFACE', 0x20a20005, '<B')

# 6.7.24 CFG_UART1: Configuration of the UART1 Interface

UbloxConfigKV('CFG_UART1_BAUDRATE', 0x40520001, '<I')
UbloxConfigKV('CFG_UART1_STOPBITS', 0x20520002, '<B')
UbloxConfigKV('CFG_UART1_DATABITS', 0x20520003, '<B')
UbloxConfigKV('CFG_UART1_PARITY', 0x20520004, '<B')
UbloxConfigKV('CFG_UART1_ENABLED', 0x10520005, '<?')

# 6.7.25 CFG_UART1INPROT: Input Protocol Configuration of the UART1 Interface

UbloxConfigKV('CFG_UART1INPROT_UBX', 0x10730001, '<?')
UbloxConfigKV('CFG_UART1INPROT_NMEA', 0x10730002, '<?')
UbloxConfigKV('CFG_UART1INPROT_RTCM3X', 0x10730004, '<?')

# 6.7.26 CFG_UART1OUTPROT: Output Protocol Configuration of the UART1 Interface

UbloxConfigKV('CFG_UART1OUTPROT_UBX', 0x10740001, '<?')
UbloxConfigKV('CFG_UART1OUTPROT_NMEA', 0x10740002, '<?')
UbloxConfigKV('CFG_UART1OUTPROT_RTCM3X', 0x10740004, '<?')

# 6.7.27 CFG_UART2: Configuration of the UART2 Interface

UbloxConfigKV('CFG_UART2_BAUDRATE', 0x40530001, '<I')
UbloxConfigKV('CFG_UART2_STOPBITS', 0x20530002, '<B')
UbloxConfigKV('CFG_UART2_DATABITS', 0x20530003, '<B')
UbloxConfigKV('CFG_UART2_PARITY', 0x20530004, '<B')
UbloxConfigKV('CFG_UART2_ENABLED', 0x10530005, '<?')
UbloxConfigKV('CFG_UART2_REMAP', 0x10530006, '<?')

# 6.7.28 CFG_UART2INPROT: Input Protocol Configuration of the UART2 Interface

UbloxConfigKV('CFG_UART2INPROT_UBX', 0x10750001, '<?')
UbloxConfigKV('CFG_UART2INPROT_NMEA', 0x10750002, '<?')
UbloxConfigKV('CFG_UART2INPROT_RTCM3X', 0x10750004, '<?')

# 6.7.29 CFG_UART2OUTPROT: Output Protocol Configuration of the UART2 Interface

UbloxConfigKV('CFG_UART2OUTPROT_UBX', 0x10760001, '<?')
UbloxConfigKV('CFG_UART2OUTPROT_NMEA', 0x10760002, '<?')
UbloxConfigKV('CFG_UART2OUTPROT_RTCM3X', 0x10760004, '<?')

# 6.7.30 CFG_USB: Configuration of the USB Interface

UbloxConfigKV('CFG_USB_ENABLED', 0x10650001, '<?')
UbloxConfigKV('CFG_USB_SELFPOW', 0x10650002, '<?')
UbloxConfigKV('CFG_USB_VENDOR_ID', 0x3065000a, '<H')
UbloxConfigKV('CFG_USB_PRODUCT_ID', 0x3065000b, '<H')
UbloxConfigKV('CFG_USB_POWER', 0x3065000c, '<H')
UbloxConfigKV('CFG_USB_VENDOR_STR0', 0x5065000d, '<8s')
UbloxConfigKV('CFG_USB_VENDOR_STR1', 0x5065000e, '<8s')
UbloxConfigKV('CFG_USB_VENDOR_STR2', 0x5065000f, '<8s')
UbloxConfigKV('CFG_USB_VENDOR_STR3', 0x50650010, '<8s')
UbloxConfigKV('CFG_USB_PRODUCT_STR0', 0x50650011, '<8s')
UbloxConfigKV('CFG_USB_PRODUCT_STR1', 0x50650012, '<8s')
UbloxConfigKV('CFG_USB_PRODUCT_STR2', 0x50650013, '<8s')
UbloxConfigKV('CFG_USB_PRODUCT_STR3', 0x50650014, '<8s')
UbloxConfigKV('CFG_USB_SERIAL_NO_STR0', 0x50650015, '<8s')
UbloxConfigKV('CFG_USB_SERIAL_NO_STR1', 0x50650016, '<8s')
UbloxConfigKV('CFG_USB_SERIAL_NO_STR2', 0x50650017, '<8s')
UbloxConfigKV('CFG_USB_SERIAL_NO_STR3', 0x50650018, '<8s')

# 6.7.31 CFG_USBINPROT: Input Protocol Configuration of the USB Interface

UbloxConfigKV('CFG_USBINPROT_UBX', 0x10770001, '<?')
UbloxConfigKV('CFG_USBINPROT_NMEA', 0x10770002, '<?')
UbloxConfigKV('CFG_USBINPROT_RTCM3X', 0x10770004, '<?')

# 6.7.32 CFG_USBOUTPROT: Output Protocol Configuration of the USB Interface

UbloxConfigKV('CFG_USBOUTPROT_UBX', 0x10780001, '<?')
UbloxConfigKV('CFG_USBOUTPROT_NMEA', 0x10780002, '<?')
UbloxConfigKV('CFG_USBOUTPROT_RTCM3X', 0x10780004, '<?')

# b = UbloxConfigKV.pack([{ 'CFG_USBOUTPROT_UBX': False }, { 'CFG_USB_PRODUCT_STR1': 'HelloHel' }])
# ba = bytearray()
# ba.extend(b)
# print(''.join('{:02x}'.format(x) for x in ba))
# print(UbloxConfigKV.unpack(b))

class UBloxDescriptor:
    '''class used to describe the layout of a UBlox message'''
    def __init__(self, name, msg_format, fields=[], count_field=None, format2=None, fields2=None):
        self.name = name
        self.msg_format = msg_format
        self.fields = fields
        self.count_field = count_field
        self.format2 = format2
        self.fields2 = fields2

    def unpack(self, msg):
        '''unpack a UBloxMessage, creating the .fields and ._recs attributes in msg'''
        msg._fields = {}

        # unpack main message blocks. A comm
        formats = self.msg_format.split(',')
        buf = msg._buf[6:-2]
        count = 0
        msg._recs = []
        fields = self.fields[:]

        for fmt in formats:
            size1 = struct.calcsize(fmt)
            if size1 > len(buf):
                raise UBloxError("%s INVALID_SIZE1=%u" % (self.name, len(buf)))
            f1 = list(struct.unpack(fmt, buf[:size1]))
            i = 0
            while i < len(f1):
                field = fields.pop(0)
                (fieldname, alen) = ArrayParse(field)
                if alen == -1:
                    msg._fields[fieldname] = f1[i]
                    if self.count_field == fieldname:
                        count = int(f1[i])
                    i += 1
                else:
                    msg._fields[fieldname] = [0]*alen
                    for a in range(alen):
                        msg._fields[fieldname][a] = f1[i]
                        i += 1
            buf = buf[size1:]
            if len(buf) == 0:
                break

        if self.count_field == '_remaining':
            count = len(buf) / struct.calcsize(self.format2)

        if count == 0:
            msg._unpacked = True
            if len(buf) != 0:
                raise UBloxError("EXTRA_BYTES=%u" % len(buf))
            return

        size2 = struct.calcsize(self.format2)
        for c in range(count):
            r = UBloxAttrDict()
            if size2 > len(buf):
                raise UBloxError("INVALID_SIZE=%u, " % len(buf))
            f2 = list(struct.unpack(self.format2, buf[:size2]))
            for i in range(len(self.fields2)):
                r[self.fields2[i]] = f2[i]
            buf = buf[size2:]
            msg._recs.append(r)
        if len(buf) != 0:
            raise UBloxError("EXTRA_BYTES=%u" % len(buf))
        msg._unpacked = True

    def pack(self, msg, msg_class=None, msg_id=None):
        '''pack a UBloxMessage from the .fields and ._recs attributes in msg'''
        f1 = []
        if msg_class is None:
            msg_class = msg.msg_class()
        if msg_id is None:
            msg_id = msg.msg_id()
        msg._buf = bytes()

        fields = self.fields[:]
        for f in fields:
            (fieldname, alen) = ArrayParse(f)
            if not fieldname in msg._fields:
                break
            if alen == -1:
                f1.append(msg._fields[fieldname])
            else:
                for a in range(alen):
                    f1.append(msg._fields[fieldname][a])
        try:
            # try full length message
            fmt = self.msg_format.replace(',', '')
            msg._buf = struct.pack(fmt, *tuple(f1))
        except Exception as e:
            # try without optional part
            fmt = self.msg_format.split(',')[0]
            msg._buf = struct.pack(fmt, *tuple(f1))

        length = len(msg._buf)
        if msg._recs:
            length += len(msg._recs) * struct.calcsize(self.format2)
        header = struct.pack('<BBBBH', PREAMBLE1, PREAMBLE2, msg_class, msg_id, length)
        msg._buf = header + msg._buf

        for r in msg._recs:
            f2 = []
            for f in self.fields2:
                f2.append(r[f])
            msg._buf += struct.pack(self.format2, *tuple(f2))
        msg._buf += struct.pack('<BB', *msg.checksum(data=msg._buf[2:]))

    def format(self, msg):
        '''return a formatted string for a message'''
        if not msg._unpacked:
            self.unpack(msg)
        ret = self.name + ': '
        for f in self.fields:
            (fieldname, alen) = ArrayParse(f)
            if not fieldname in msg._fields:
                continue
            v = msg._fields[fieldname]
            if isinstance(v, list):
                ret += '%s=[' % fieldname
                for a in range(alen):
                    ret += '%s, ' % v[a]
                ret = ret[:-2] + '], '
            elif isinstance(v, str):
                ret += '%s="%s", ' % (f, v.rstrip(' \0'))
            else:
                ret += '%s=%s, ' % (f, v)
        for r in msg._recs:
            ret += '[ '
            for f in self.fields2:
                v = r[f]
                ret += '%s=%s, ' % (f, v)
            ret = ret[:-2] + ' ], '
        return ret[:-2]


# list of supported message types.
msg_types = {
    (CLASS_ACK, MSG_ACK_ACK)    : UBloxDescriptor('ACK_ACK',
                                                  '<BB',
                                                  ['clsID', 'msgID']),
    (CLASS_ACK, MSG_ACK_NACK)   : UBloxDescriptor('ACK_NACK',
                                                  '<BB',
                                                  ['clsID', 'msgID']),
    (CLASS_CFG, MSG_CFG_USB)    : UBloxDescriptor('CFG_USB',
                                                  '<HHHHHH32s32s32s',
                                                  ['vendorID', 'productID', 'reserved1', 'reserved2', 'powerConsumption',
                                                   'flags', 'vendorString', 'productString', 'serialNumber']),
    (CLASS_CFG, MSG_CFG_PRT)    : UBloxDescriptor('CFG_PRT',
                                                  '<BBHIIHHHH',
                                                  ['portID', 'reserved0', 'txReady', 'mode', 'baudRate', 'inProtoMask',
                                                   'outProtoMask', 'reserved4', 'reserved5']),
    (CLASS_CFG, MSG_CFG_CFG)    : UBloxDescriptor('CFG_CFG',
                                                  '<III,B',
                                                  ['clearMask', 'saveMask', 'loadMask', 'deviceMask']),
    (CLASS_CFG, MSG_CFG_RST)    : UBloxDescriptor('CFG_RST',
                                                  '<HBB',
                                                  ['navBbrMask ', 'resetMode', 'reserved1']),
    (CLASS_CFG, MSG_CFG_SBAS)   : UBloxDescriptor('CFG_SBAS',
                                                  '<BBBBI',
                                                  ['mode', 'usage', 'maxSBAS', 'scanmode2', 'scanmode1']),
    (CLASS_CFG, MSG_CFG_GNSS)   : UBloxDescriptor('CFG_GNSS',
                                                  '<BBBBBBBBI',
                                                  ['msgVer', 'numTrkChHw', 'numTrkChUse', 'numConfigBlocks', 'gnssId',
                                                   'resTrkCh', 'maxTrkCh', 'resetved1', 'flags']),
    (CLASS_CFG, MSG_CFG_RATE)   : UBloxDescriptor('CFG_RATE',
                                                  '<HHH',
                                                  ['measRate', 'navRate', 'timeRef']),
    (CLASS_CFG, MSG_CFG_MSG)    : UBloxDescriptor('CFG_MSG',
                                                  '<BB6B',
                                                  ['msgClass', 'msgId', 'rates[6]']),
    (CLASS_NAV, MSG_NAV_CLOCK)  : UBloxDescriptor('NAV_CLOCK',
                                                  '<IiiII',
                                                  ['iTOW', 'clkB', 'clkD', 'tAcc', 'fAcc']),
    (CLASS_NAV, MSG_NAV_DGPS)   : UBloxDescriptor('NAV_DGPS',
                                                  '<IihhBBH',
                                                  ['iTOW', 'age', 'baseId', 'baseHealth', 'numCh', 'status', 'reserved1'],
                                                  'numCh',
                                                  '<BBHff',
                                                  ['svid', 'flags', 'ageC', 'prc', 'prrc']),
    (CLASS_NAV, MSG_NAV_DOP)    : UBloxDescriptor('NAV_DOP',
                                                  '<IHHHHHHH',
                                                  ['iTOW', 'gDOP', 'pDOP', 'tDOP', 'vDOP', 'hDOP', 'nDOP', 'eDOP']),
    (CLASS_NAV, MSG_NAV_HPPOSLLH): UBloxDescriptor('NAV_HPPOSLLH',
                                                  '<B3BIiiiibbbbII',
                                                  ['version', 'reserved1[3]', 'iTOW',
                                                   'lon', 'lat', 'height', 'hMSL', 'lonHp', 'latHp', 'heightHp',
                                                   'hMSLHp', 'hAcc', 'vAcc']),
    (CLASS_NAV, MSG_NAV_ORB)  : UBloxDescriptor('NAV_ORB',
                                                    '<IBBH',
                                                  ['iTOW', 'version', 'numSv', 'reserved1'],
                                                     'numSv',
                                                  'BBBBBB',
                                                  ['gnssId', 'svId', 'svFlag', 'eph', 'alm', 'otherOrb']),
    (CLASS_NAV, MSG_NAV_POSECEF): UBloxDescriptor('NAV_POSECEF',
                                                  '<IiiiI',
                                                  ['iTOW', 'ecefX', 'ecefY', 'ecefZ', 'pAcc']),
    (CLASS_NAV, MSG_NAV_POSLLH) : UBloxDescriptor('NAV_POSLLH',
                                                  '<IiiiiII',
                                                  ['iTOW', 'Longitude', 'Latitude', 'height', 'hMSL', 'hAcc', 'vAcc']),
    (CLASS_NAV, MSG_NAV_POSUTM) : UBloxDescriptor('NAV_POSUTM',
                                                  '<Iiiibb',
                                                  ['iTOW', 'East', 'North', 'Alt', 'Zone', 'Hem']),
    (CLASS_NAV, MSG_NAV_PVT)  :   UBloxDescriptor('NAV_PVT',
                                                  '<IHBBBBBB' + 'IiBBBBii' + 'iiIIiiii' + 'iIIHH4Bih' + 'H',
                                                  ['iTOW', 'year', 'month', 'day', 'hour', 'min', 'sec', 'valid',
                                                   'tAcc', 'nano', 'fixType', 'flags', 'flags2', 'numSV', 'lon', 'lat',
                                                   'height', 'hMSL', 'hAcc', 'vAcc', 'velN', 'velE', 'velD', 'gSpeed',
                                                   'headMot', 'sAcc', 'headAcc', 'pDOP', 'flags3', 'reserved0[4]', 'headVeh', 'magDec',
                                                   'magAcc' ]),
    (CLASS_NAV, MSG_NAV_SAT):     UBloxDescriptor('NAV_SAT',
                                                  '<IBBH',
                                                  ['iTOW', 'version', 'numSvs', 'reserved1'],
                                                  'numSvs',
                                                  '<BBBbhhI',
                                                  ['gnssId', 'svId', 'cno', 'elev', 'azim', 'prRes', 'flags']),
    (CLASS_NAV, MSG_NAV_SBAS)   : UBloxDescriptor('NAV_SBAS',
                                                  '<IBBbBB3B',
                                                  ['iTOW', 'geo', 'mode', 'sys', 'service', 'cnt', 'reserved1[3]' ],
                                                  'cnt',
                                                  'BBBBBBhHh',
                                                  ['svid', 'flags', 'udre', 'svSys', 'svService', 'reserved1',
                                                   'prc', 'reserved2', 'ic']),
    (CLASS_NAV, MSG_NAV_SIG):     UBloxDescriptor('NAV_SIG',
                                                  '<IBBH',
                                                  ['iTOW', 'version', 'numSigs', 'reserved1'],
                                                  'numSigs',
                                                  '<BBBBhBBBBHI',
                                                  ['gnssId', 'svId', 'sigId', 'freqId', 'prRes', 'cno', 'qualityInd', 'corrSource', 'ionoModel', 'sigFlags', 'reserved2']),
    (CLASS_NAV, MSG_NAV_SOL)    : UBloxDescriptor('NAV_SOL',
                                                  '<IihBBiiiIiiiIHBBI',
                                                  ['iTOW', 'fTOW', 'week', 'gpsFix', 'flags', 'ecefX', 'ecefY', 'ecefZ',
                                                   'pAcc', 'ecefVX', 'ecefVY', 'ecefVZ', 'sAcc', 'pDOP', 'reserved1',
                                                   'numSV', 'reserved2']),
    (CLASS_NAV, MSG_NAV_STATUS) : UBloxDescriptor('NAV_STATUS',
                                                  '<IBBBBII',
                                                  ['iTOW', 'gpsFix', 'flags', 'fixStat', 'flags2', 'ttff', 'msss']),
    (CLASS_NAV, MSG_NAV_SVINFO) : UBloxDescriptor('NAV_SVINFO',
                                                  '<IBBH',
                                                  ['iTOW', 'numCh', 'globalFlags', 'reserved2'],
                                                  'numCh',
                                                  '<BBBBBbhi',
                                                  ['chn', 'svid', 'flags', 'quality', 'cno', 'elev', 'azim', 'prRes']),
    (CLASS_NAV, MSG_NAV_SVIN):    UBloxDescriptor('NAV_SVIN',
                                                  '<B3BIIiiibbbBII??BB',
                                                  ['version', 'reserved1[3]', 'iTOW',
                                                   'dur', 'meanX', 'meanY', 'meanZ', 'meanXHP', 'meanYHP',
                                                   'meanZHP', 'reserved2', 'meanAcc', 'obs', 'isvalid', 'active',
                                                   'reserved30', 'reserved31']),
    (CLASS_NAV, MSG_NAV_TIMEGAL): UBloxDescriptor('NAV_TIMEGAL',
                                                  '<IIihbBI',
                                                  ['iTOW', 'galTow', 'fGalTow', 'galWno', 'leaps', 'valid', 'tAcc', 'min', 'sec', 'valid']),
    (CLASS_NAV, MSG_NAV_TIMEGPS): UBloxDescriptor('NAV_TIMEGPS',
                                                  '<IihbBI',
                                                  ['iTOW', 'fTOW', 'week', 'leapS', 'valid', 'tAcc']),
    (CLASS_NAV, MSG_NAV_TIMEUTC): UBloxDescriptor('NAV_TIMEUTC',
                                                  '<IIiHBBBBBB',
                                                  ['iTOW', 'tAcc', 'nano', 'year', 'month', 'day', 'hour', 'min', 'sec', 'valid']),
    (CLASS_NAV, MSG_NAV_VELECEF): UBloxDescriptor('NAV_VELECEF',
                                                  '<IiiiI',
                                                  ['iTOW', 'ecefVX', 'ecefVY', 'ecefVZ', 'sAcc']),
    (CLASS_NAV, MSG_NAV_VELNED) : UBloxDescriptor('NAV_VELNED',
                                                  '<IiiiIIiII',
                                                  ['iTOW', 'velN', 'velE', 'velD', 'speed', 'gSpeed', 'heading',
                                                   'sAcc', 'cAcc']),
    (CLASS_RXM, MSG_RXM_SVSI)   : UBloxDescriptor('RXM_SVSI',
                                                  '<IhBB',
                                                  ['iTOW', 'week', 'numVis', 'numSV'],
                                                  'numSV',
                                                  '<BBhbB',
                                                  ['svid', 'svFlag', 'azim', 'elev', 'age']),
    (CLASS_RXM, MSG_RXM_EPH)    : UBloxDescriptor('RXM_EPH',
                                                  '<II , 8I 8I 8I',
                                                  ['svid', 'how',
                                                   'sf1d[8]', 'sf2d[8]', 'sf3d[8]']),
    (CLASS_AID, MSG_AID_EPH)    : UBloxDescriptor('AID_EPH',
                                                  '<II , 8I 8I 8I',
                                                  ['svid', 'how',
                                                   'sf1d[8]', 'sf2d[8]', 'sf3d[8]']),
    (CLASS_AID, MSG_AID_AOP)    : UBloxDescriptor('AID_AOP',
                                                  '<B47B , 48B 48B 48B',
                                                  ['svid', 'data[47]', 'optional0[48]', 'optional1[48]', 'optional1[48]']),
    (CLASS_RXM, MSG_RXM_RAW)   : UBloxDescriptor('RXM_RAW',
                                                  '<ihBB',
                                                  ['iTOW', 'week', 'numSV', 'reserved1'],
                                                  'numSV',
                                                  '<ddfBbbB',
                                                  ['cpMes', 'prMes', 'doMes', 'sv', 'mesQI', 'cno', 'lli']),
    (CLASS_RXM, MSG_RXM_RAWX)	: UBloxDescriptor('RXM_RAWX',
                                                  '<dHbBB3B',
                                                  ['rcvTow', 'week', 'leapS', 'numMeas', 'recStat', 'reserved1[3]'],
                                                   'numMeas',
                                                  '<ddfBBBBHBBBBBB',
                                                  ['prMes', 'cpMes', 'doMes', 'gnssId', 'svId', 'reserved2', 'freqId',
                                                   'locktime', 'cno', 'prStdev', 'cpStdev', 'doStdev', 'trkStat', 'reserved3']),
    (CLASS_RXM, MSG_RXM_SFRBX)	: UBloxDescriptor('RXM_SFRBX',
                                                  '<BBBBBBBB',
                                                  ['gnssId', 'svid', 'reserved1', 'freqId', 'numWords', 'reserved2', 'version', 'reserved3'],
                                                   'numWords',
                                                  '<L',
                                                  ['dwrd']),
    (CLASS_RXM, MSG_RXM_SFRB)  : UBloxDescriptor('RXM_SFRB',
                                                  '<BB10I',
                                                  ['chn', 'svid', 'dwrd[10]']),
    (CLASS_AID, MSG_AID_ALM)   : UBloxDescriptor('AID_ALM',
                                                  '<II',
                                                 '_remaining',
                                                 'I',
                                                 ['dwrd']),
    (CLASS_RXM, MSG_RXM_ALM)   : UBloxDescriptor('RXM_ALM',
                                                  '<II , 8I',
                                                  ['svid', 'week', 'dwrd[8]']),
    (CLASS_CFG, MSG_CFG_NAV5)   : UBloxDescriptor('CFG_NAV5',
                                                  '<HBBiIbBHHHHBBIII',
                                                  ['mask', 'dynModel', 'fixMode', 'fixedAlt', 'fixedAltVar', 'minElev',
                                                   'drLimit', 'pDop', 'tDop', 'pAcc', 'tAcc', 'staticHoldThresh',
                                                   'dgpsTimeOut', 'reserved2', 'reserved3', 'reserved4']),
    (CLASS_CFG, MSG_CFG_NAVX5)   : UBloxDescriptor('CFG_NAVX5',
                                                  '<HHIBBBBBBBBBBHIBBBBBBHII',
                                                  ['version', 'mask1', 'reserved0', 'reserved1', 'reserved2',
                                                   'minSVs', 'maxSVs', 'minCNO', 'reserved5', 'iniFix3D',
                                                   'reserved6', 'reserved7', 'reserved8', 'wknRollover',
                                                   'reserved9', 'reserved10', 'reserved11',
                                                   'usePPP', 'useAOP', 'reserved12', 'reserved13',
                                                   'aopOrbMaxErr', 'reserved3', 'reserved4']),
    (CLASS_MON, MSG_MON_HW)     : UBloxDescriptor('MON_HW',
                                                  '<IIIIHHBBBBIB25BHIII',
                                                  ['pinSel', 'pinBank', 'pinDir', 'pinVal', 'noisePerMS', 'agcCnt', 'aStatus',
                                                   'aPower', 'flags', 'reserved1', 'usedMask',
                                                   'VP[25]',
                                                   'jamInd', 'reserved3', 'pinInq',
                                                   'pullH', 'pullL']),
    (CLASS_MON, MSG_MON_HW2)    : UBloxDescriptor('MON_HW2',
                                                  '<bBbBB3BI8BI4B',
                                                  ['ofsI', 'magI', 'ofsQ', 'magQ', 'cfgSource', 'reserved1[3]',
                                                   'lowLevCfg', 'reserved2[8]', 'postStatus', 'reserved3[4]']),
    (CLASS_MON, MSG_MON_SCHD)   : UBloxDescriptor('MON_SCHD',
                                                  '<IIIIHHHBB',
                                                  ['tskRun', 'tskSchd', 'tskOvrr', 'tskReg', 'stack',
                                                   'stackSize', 'CPUIdle', 'flySly', 'ptlSly']),
    (CLASS_MON, MSG_MON_VER)    : UBloxDescriptor('MON_VER',
                                                  '<30s10s,30s',
                                                  ['swVersion', 'hwVersion', 'romVersion'],
                                                  '_remaining',
                                                  '30s',
                                                  ['extension']),
    (CLASS_TIM, MSG_TIM_TP)     : UBloxDescriptor('TIM_TP',
                                                  '<IIiHBB',
                                                  ['towMS', 'towSubMS', 'qErr', 'week', 'flags', 'reserved1']),
    (CLASS_TIM, MSG_TIM_TM2)    : UBloxDescriptor('TIM_TM2',
                                                  '<BBHHHIIIII',
                                                  ['ch', 'flags', 'count', 'wnR', 'wnF', 'towMsR', 'towSubMsR',
                                                   'towMsF', 'towSubMsF', 'accEst']),
    (CLASS_TIM, MSG_TIM_SVIN)   : UBloxDescriptor('TIM_SVIN',
                                                  '<IiiiIIBBH',
                                                  ['dur', 'meanX', 'meanY', 'meanZ', 'meanV',
                                                   'obs', 'valid', 'active', 'reserved1']),
    (CLASS_INF, MSG_INF_ERROR)  : UBloxDescriptor('INF_ERR', '<18s', ['str']),
    (CLASS_INF, MSG_INF_DEBUG)  : UBloxDescriptor('INF_DEBUG', '<18s', ['str']),
    (CLASS_CFG, MSG_CFG_TP5)    : UBloxDescriptor('CFG_TP5', '<BBHhhIIIIiI',
                                                  ['tpIdx', 'version', 'reserved1', 'antCableDelay', 'rfGroupDelay',
                                                   'freqPeriod', 'freqPeriodLock', 'pulseLenRatio', 'pulseLenRatioLock',
                                                   'userConfigDelay', 'flags'])
}

if sys.version_info < (3,):
    class UBloxMessage:
        '''UBlox message class - holds a UBX binary message'''
        def __init__(self):
            self._buf = ""
            self._fields = {}
            self._recs = []
            self._unpacked = False
            self.debug_level = 0

        def __str__(self):
            '''format a message as a string'''
            if not self.valid():
                return 'UBloxMessage(INVALID)'
            type = self.msg_type()
            if type in msg_types:
                return msg_types[type].format(self)
            return 'UBloxMessage(UNKNOWN %s, %u)' % (str(type), self.msg_length())

        def __getattr__(self, name):
            '''allow access to message fields'''
            try:
                return self._fields[name]
            except KeyError:
                if name == 'recs':
                    return self._recs
                raise AttributeError(name)

        def __setattr__(self, name, value):
            '''allow access to message fields'''
            if name.startswith('_'):
                self.__dict__[name] = value
            else:
                self._fields[name] = value

        def have_field(self, name):
            '''return True if a message contains the given field'''
            return name in self._fields

        def debug(self, level, msg):
            '''write a debug message'''
            if self.debug_level >= level:
                print(msg)

        def unpack(self):
            '''unpack a message'''
            if not self.valid():
                raise UBloxError('INVALID MESSAGE')
            type = self.msg_type()
            if not type in msg_types:
                raise UBloxError('Unknown message %s length=%u' % (str(type), len(self._buf)))
            msg_types[type].unpack(self)

        def pack(self):
            '''pack a message'''
            if not self.valid():
                raise UbloxError('INVALID MESSAGE')
            type = self.msg_type()
            if not type in msg_types:
                raise UBloxError('Unknown message %s' % str(type))
            msg_types[type].pack(self)

        def name(self):
            '''return the short string name for a message'''
            if not self.valid():
                raise UbloxError('INVALID MESSAGE')
            type = self.msg_type()
            if not type in msg_types:
                raise UBloxError('Unknown message %s length=%u' % (str(type), len(self._buf)))
            return msg_types[type].name

        def msg_class(self):
            '''return the message class'''
            return ord(self._buf[2])

        def msg_id(self):
            '''return the message id within the class'''
            return ord(self._buf[3])

        def msg_type(self):
            '''return the message type tuple (class, id)'''
            return (self.msg_class(), self.msg_id())

        def msg_length(self):
            '''return the payload length'''
            (payload_length,) = struct.unpack('<H', self._buf[4:6])
            return payload_length

        def valid_so_far(self):
            '''check if the message is valid so far'''
            if len(self._buf) > 0 and ord(self._buf[0]) != PREAMBLE1:
                return False
            if len(self._buf) > 1 and ord(self._buf[1]) != PREAMBLE2:
                self.debug(1, "bad pre2")
                return False
            if self.needed_bytes() == 0 and not self.valid():
                if len(self._buf) > 8:
                    self.debug(1, "bad checksum len=%u needed=%u" % (len(self._buf), self.needed_bytes()))
                else:
                    self.debug(1, "bad len len=%u needed=%u" % (len(self._buf), self.needed_bytes()))
                return False
            return True

        def add(self, bytes):
            '''add some bytes to a message'''
            self._buf += bytes
            while not self.valid_so_far() and len(self._buf) > 0:
                '''handle corrupted streams'''
                self._buf = self._buf[1:]
            if self.needed_bytes() < 0:
                self._buf = ""

        def checksum(self, data=None):
            '''return a checksum tuple for a message'''
            if data is None:
                data = self._buf[2:-2]
            cs = 0
            ck_a = 0
            ck_b = 0
            for i in data:
                ck_a = (ck_a + ord(i)) & 0xFF
                ck_b = (ck_b + ck_a) & 0xFF
            return (ck_a, ck_b)

        def valid_checksum(self):
            '''check if the checksum is OK'''
            (ck_a, ck_b) = self.checksum()
            d = self._buf[2:-2]
            (ck_a2, ck_b2) = struct.unpack('<BB', self._buf[-2:])
            return ck_a == ck_a2 and ck_b == ck_b2

        def needed_bytes(self):
            '''return number of bytes still needed'''
            if len(self._buf) < 6:
                return 8 - len(self._buf)
            return self.msg_length() + 8 - len(self._buf)

        def valid(self):
            '''check if a message is valid'''
            return len(self._buf) >= 8 and self.needed_bytes() == 0 and self.valid_checksum()
else:
    class UBloxMessage:
        '''UBlox message class - holds a UBX binary message'''
        def __init__(self):
            self._buf = b""
            self._fields = {}
            self._recs = []
            self._unpacked = False
            self.debug_level = 0

        def __str__(self):
            '''format a message as a string'''
            if not self.valid():
                return 'UBloxMessage(INVALID)'
            type = self.msg_type()
            if type in msg_types:
                return msg_types[type].format(self)
            return 'UBloxMessage(UNKNOWN %s, %u)' % (str(type), self.msg_length())

        def __getattr__(self, name):
            '''allow access to message fields'''
            try:
                return self._fields[name]
            except KeyError:
                if name == 'recs':
                    return self._recs
                raise AttributeError(name)

        def __setattr__(self, name, value):
            '''allow access to message fields'''
            if name.startswith('_'):
                self.__dict__[name] = value
            else:
                self._fields[name] = value

        def have_field(self, name):
            '''return True if a message contains the given field'''
            return name in self._fields

        def debug(self, level, msg):
            '''write a debug message'''
            if self.debug_level >= level:
                print(msg)

        def unpack(self):
            '''unpack a message'''
            if not self.valid():
                raise UBloxError('INVALID MESSAGE')
            type = self.msg_type()
            if not type in msg_types:
                raise UBloxError('Unknown message %s length=%u' % (str(type), len(self._buf)))
            msg_types[type].unpack(self)

        def pack(self):
            '''pack a message'''
            if not self.valid():
                raise UbloxError('INVALID MESSAGE')
            type = self.msg_type()
            if not type in msg_types:
                raise UBloxError('Unknown message %s' % str(type))
            msg_types[type].pack(self)

        def name(self):
            '''return the short string name for a message'''
            if not self.valid():
                raise UbloxError('INVALID MESSAGE')
            type = self.msg_type()
            if not type in msg_types:
                raise UBloxError('Unknown message %s length=%u' % (str(type), len(self._buf)))
            return msg_types[type].name

        def msg_class(self):
            '''return the message class'''
            return self._buf[2]

        def msg_id(self):
            '''return the message id within the class'''
            return self._buf[3]

        def msg_type(self):
            '''return the message type tuple (class, id)'''
            return (self.msg_class(), self.msg_id())

        def msg_length(self):
            '''return the payload length'''
            (payload_length,) = struct.unpack('<H', self._buf[4:6])
            return payload_length

        def valid_so_far(self):
            '''check if the message is valid so far'''
            if len(self._buf) > 0 and self._buf[0] != PREAMBLE1:
                return False
            if len(self._buf) > 1 and self._buf[1] != PREAMBLE2:
                self.debug(1, "bad pre2")
                return False
            if self.needed_bytes() == 0 and not self.valid():
                if len(self._buf) > 8:
                    self.debug(1, "bad checksum len=%u needed=%u" % (len(self._buf), self.needed_bytes()))
                else:
                    self.debug(1, "bad len len=%u needed=%u" % (len(self._buf), self.needed_bytes()))
                return False
            return True

        def add(self, bytes):
            '''add some bytes to a message'''
            self._buf += bytes
            while not self.valid_so_far() and len(self._buf) > 0:
                '''handle corrupted streams'''
                self._buf = self._buf[1:]
            if self.needed_bytes() < 0:
                self._buf = b""

        def checksum(self, data=None):
            '''return a checksum tuple for a message'''
            if data is None:
                data = self._buf[2:-2]
            cs = 0
            ck_a = 0
            ck_b = 0
            for i in data:
                ck_a = (ck_a + i) & 0xFF
                ck_b = (ck_b + ck_a) & 0xFF
            return (ck_a, ck_b)

        def valid_checksum(self):
            '''check if the checksum is OK'''
            (ck_a, ck_b) = self.checksum()
            d = self._buf[2:-2]
            (ck_a2, ck_b2) = struct.unpack('<BB', self._buf[-2:])
            return ck_a == ck_a2 and ck_b == ck_b2

        def needed_bytes(self):
            '''return number of bytes still needed'''
            if len(self._buf) < 6:
                return 8 - len(self._buf)
            return self.msg_length() + 8 - len(self._buf)

        def valid(self):
            '''check if a message is valid'''
            return len(self._buf) >= 8 and self.needed_bytes() == 0 and self.valid_checksum()


class UBlox:
    '''main UBlox control class.

    port can be a file (for reading only) or a serial device
    '''
    def __init__(self, port, baudrate=115200, timeout=0):

        self.serial_device = port
        self.baudrate = baudrate
        self.use_sendrecv = False
        self.read_only = False
        self.debug_level = 0

        if self.serial_device.startswith("tcp:"):
            import socket
            a = self.serial_device.split(':')
            destination_addr = (a[1], int(a[2]))
            self.dev = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.dev.connect(destination_addr)
            self.dev.setblocking(1)
            self.dev.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)
            self.use_sendrecv = True
        elif os.path.isfile(self.serial_device):
            self.read_only = True
            self.dev = open(self.serial_device, mode='rb')
        else:
            import serial
            self.dev = serial.Serial(self.serial_device, baudrate=self.baudrate,
                                     dsrdtr=False, rtscts=False, xonxoff=False, timeout=timeout)
        self.logfile = None
        self.log = None
        self.preferred_dynamic_model = None
        self.preferred_usePPP = None
        self.preferred_dgps_timeout = None

    def close(self):
        '''close the device'''
        self.dev.close()
        self.dev = None

    def set_debug(self, debug_level):
        '''set debug level'''
        self.debug_level = debug_level

    def debug(self, level, msg):
        '''write a debug message'''
        if self.debug_level >= level:
            print(msg)

    def set_logfile(self, logfile, append=False):
        '''setup logging to a file'''
        if self.log is not None:
            self.log.close()
            self.log = None
        self.logfile = logfile
        if self.logfile is not None:
            if append:
                mode = 'ab'
            else:
                mode = 'wb'
            self.log = open(self.logfile, mode=mode)

    def set_preferred_dynamic_model(self, model):
        '''set the preferred dynamic model for receiver'''
        self.preferred_dynamic_model = model
        if model is not None:
            self.configure_poll(CLASS_CFG, MSG_CFG_NAV5)

    def set_preferred_dgps_timeout(self, timeout):
        '''set the preferred DGPS timeout for receiver'''
        self.preferred_dgps_timeout = timeout
        if timeout is not None:
            self.configure_poll(CLASS_CFG, MSG_CFG_NAV5)

    def set_preferred_usePPP(self, usePPP):
        '''set the preferred usePPP setting for the receiver'''
        if usePPP is None:
            self.preferred_usePPP = None
            return
        self.preferred_usePPP = int(usePPP)
        self.configure_poll(CLASS_CFG, MSG_CFG_NAVX5)

    def nmea_checksum(self, msg):
        d = msg[1:]
        cs = 0
        for i in d:
            cs ^= ord(i)
        return cs

    def write(self, buf):
        '''write some bytes'''
        if not self.read_only:
            if self.use_sendrecv:
                return self.dev.send(buf)
            return self.dev.write(buf)

    def read(self, n):
        '''read some bytes'''
        if self.use_sendrecv:
            import socket
            try:
                return self.dev.recv(n)
            except socket.error as e:
                return ''
        return self.dev.read(n)

    def send_nmea(self, msg):
        if not self.read_only:
            s = msg + "*%02X" % self.nmea_checksum(msg)
            self.write(s)

    def set_binary(self):
        '''put a UBlox into binary mode using a NMEA string'''
        if not self.read_only:
            print("try set binary at %u" % self.baudrate)
            self.send_nmea("$PUBX,41,0,0007,0001,%u,0" % self.baudrate)
            self.send_nmea("$PUBX,41,1,0007,0001,%u,0" % self.baudrate)
            self.send_nmea("$PUBX,41,2,0007,0001,%u,0" % self.baudrate)
            self.send_nmea("$PUBX,41,3,0007,0001,%u,0" % self.baudrate)
            self.send_nmea("$PUBX,41,4,0007,0001,%u,0" % self.baudrate)
            self.send_nmea("$PUBX,41,5,0007,0001,%u,0" % self.baudrate)

    def seek_percent(self, pct):
        '''seek to the given percentage of a file'''
        self.dev.seek(0, 2)
        filesize = self.dev.tell()
        self.dev.seek(pct*0.01*filesize)

    def special_handling(self, msg):
        '''handle automatic configuration changes'''
        if msg.name() == 'CFG_NAV5':
            msg.unpack()
            sendit = False
            pollit = False
            if self.preferred_dynamic_model is not None and msg.dynModel != self.preferred_dynamic_model:
                msg.dynModel = self.preferred_dynamic_model
                sendit = True
                pollit = True
            if self.preferred_dgps_timeout is not None and msg.dgpsTimeOut != self.preferred_dgps_timeout:
                msg.dgpsTimeOut = self.preferred_dgps_timeout
                self.debug(2, "Setting dgpsTimeOut=%u" % msg.dgpsTimeOut)
                sendit = True
                # we don't re-poll for this one, as some receivers refuse to set it
            if sendit:
                msg.pack()
                self.send(msg)
                if pollit:
                    self.configure_poll(CLASS_CFG, MSG_CFG_NAV5)
        if msg.name() == 'CFG_NAVX5' and self.preferred_usePPP is not None:
            msg.unpack()
            if msg.usePPP != self.preferred_usePPP:
                msg.usePPP = self.preferred_usePPP
                msg.mask = 1<<13
                msg.pack()
                self.send(msg)
                self.configure_poll(CLASS_CFG, MSG_CFG_NAVX5)


    def receive_message(self, ignore_eof=False):
        '''blocking receive of one ublox message'''
        msg = UBloxMessage()
        while True:
            n = msg.needed_bytes()
            b = self.read(n)
            if not b:
                if ignore_eof:
                    time.sleep(0.01)
                    continue
                return None
            msg.add(b)
            if self.log is not None:
                self.log.write(b)
                self.log.flush()
            if msg.valid():
                self.special_handling(msg)
                return msg

    def receive_message_noerror(self, ignore_eof=False):
        '''blocking receive of one ublox message, ignoring errors'''
        try:
            return self.receive_message(ignore_eof=ignore_eof)
        except UBloxError as e:
            print(e)
            return None
        except OSError as e:
            # Occasionally we get hit with 'resource temporarily unavailable'
            # messages here on the serial device, catch them too.
            print(e)
            return None

    def send(self, msg):
        '''send a preformatted ublox message'''
        if not msg.valid():
            self.debug(1, "invalid send")
            return
        if not self.read_only:
            self.write(msg._buf)

    def send_message(self, msg_class, msg_id, payload):
        '''send a ublox message with class, id and payload'''
        msg = UBloxMessage()
        msg._buf = struct.pack('<BBBBH', 0xb5, 0x62, msg_class, msg_id, len(payload))
        msg._buf += payload
        (ck_a, ck_b) = msg.checksum(msg._buf[2:])
        msg._buf += struct.pack('<BB', ck_a, ck_b)

        # for i in msg._buf:
        #     print "%02x " % ord(i),
        # print("")

        self.send(msg)

    def configure_solution_rate(self, rate_ms=200, nav_rate=1, timeref=0):
        '''configure the solution rate in milliseconds'''
        payload = struct.pack('<HHH', rate_ms, nav_rate, timeref)
        self.send_message(CLASS_CFG, MSG_CFG_RATE, payload)

    def configure_message_rate(self, msg_class, msg_id, rate):
        '''configure the message rate for a given message'''
        payload = struct.pack('<BBB', msg_class, msg_id, rate)
        self.send_message(CLASS_CFG, MSG_CFG_SET_RATE, payload)

    def configure_port(self, port=1, inMask=3, outMask=3, mode=2240, baudrate=None):
        '''configure a IO port'''
        if baudrate is None:
            baudrate = self.baudrate
        payload = struct.pack('<BBHIIHHHH', port, 0xff, 0, mode, baudrate, inMask, outMask, 0xFFFF, 0xFFFF)
        self.send_message(CLASS_CFG, MSG_CFG_PRT, payload)

    def configure_loadsave(self, clearMask=0, saveMask=0, loadMask=0, deviceMask=0):
        '''configure configuration load/save'''
        payload = struct.pack('<IIIB', clearMask, saveMask, loadMask, deviceMask)
        self.send_message(CLASS_CFG, MSG_CFG_CFG, payload)

    def configure_poll(self, msg_class, msg_id, payload=''):
        '''poll a configuration message'''
        self.send_message(msg_class, msg_id, payload)

    def configure_poll_port(self, portID=None):
        '''poll a port configuration'''
        if portID is None:
            self.configure_poll(CLASS_CFG, MSG_CFG_PRT)
        else:
            self.configure_poll(CLASS_CFG, MSG_CFG_PRT, struct.pack('<B', portID))

    def configure_min_max_sats(self, min_sats=4, max_sats=32):
        '''Set the minimum/maximum number of satellites for a solution in the NAVX5 message'''
        payload = struct.pack('<HHIBBBBBBBBBBHIBBBBBBHII', 0, 4, 0, 0, 0, min_sats, max_sats, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        self.send_message(CLASS_CFG, MSG_CFG_NAVX5, payload)

    def module_reset(self, set, mode):
        ''' Reset the module for hot/warm/cold start'''
        payload = struct.pack('<HBB', set, mode, 0)
        self.send_message(CLASS_CFG, MSG_CFG_RST, payload)

    def configure_ublox_usb_out(self, value):
        b = UbloxConfigKV.pack([{ 'CFG_USBOUTPROT_UBX': value }])
        payload = struct.pack('<BBh', 0, 1, 0)
        payload += b
        self.send_message(CLASS_CFG, MSG_CFG_VALSET, payload)

    def configure_ublox_usb_sat(self, value):
        b = UbloxConfigKV.pack([{ 'CFG_MSGOUT_UBX_NAV_SAT_USB': value }])
        payload = struct.pack('<BBh', 0, 1, 0)
        payload += b
        self.send_message(CLASS_CFG, MSG_CFG_VALSET, payload)
